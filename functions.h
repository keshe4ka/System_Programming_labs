/***********************************************/
/* Занятое ожидание с фиксированным интервалом */
/***********************************************/

/* счетчик циклов ожидания и функции ожидания */
static int waitFactor;

void a0wait(int I) {
    int j;
    double d;

    I *= 100;
    for (waitFactor = 0; waitFactor < I; waitFactor++)
        for (j = 0; j < 10000; j++)
            d = 3.1415 * j;
}

/*************************************************/
/* занятое ожидание, время которого определяется */
/*   случайным числом в заданном интервал        */
/*************************************************/
void a1wait(int I) {
    int r;

    /* инициализация генератора случайных чисел */
    srand(time(NULL));
    /* получение случайного числа в интервале 0 - I-1 */
    r = (int) ((double) I * rand() / RAND_MAX);
    /* ожидание */
    a0wait(r);
}

/********************************************************/
/* Получене символьного представления текущего времени  */
/********************************************************/
/* Функция возвращает указатель на строку, содержащую   */
/* текущее время в формате:  HH:MM:SS.mmm               */
/* Функция возвращает указатель на строку, содержащую   */
char *curtime() {
    /* переменные для выделения текущего времени */
    struct timeval tv;  /* структура представления времени */
    struct tm *tmptr;   /* структура представления времени */
    char ts1[40];       /* промежуточная строка */
    static char ts[40]; /* результирующая строка */
    long ms;            /* миллисекунды */
    /* определение текущего времени */
    gettimeofday(&tv, NULL);
    /* приведение параметров времени к локальному поясу */
    tmptr = localtime(&tv.tv_sec);
    /* преобразование даты в строку */
    strftime(ts1, sizeof(ts1), "%H:%M:%S", tmptr);
    /* добавление к строке времени миллисекунд */
    ms = tv.tv_usec / 1000;
    sprintf(ts, "%s.%03ld", ts1, ms);
    return ts;
}
